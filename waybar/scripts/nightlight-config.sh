#!/bin/bash

# Waybar Nightlight Configuration Script
# TUI popup for configuring wlsunset times using rofi
# Follows the ASCII art style from waybar modules.jsonc

# ========================================
# ASCII ART ELEMENTS (matching waybar)
# ========================================
BRACKET_OPEN="["
BRACKET_CLOSE="]"

# Configuration file
ENV_FILE="$HOME/.config/waybar/scripts/.env"

# Default values (from nightlight-toggle.sh)
DEFAULT_START_TIME="00:00"
DEFAULT_END_TIME="23:59"
DEFAULT_TEMP_NIGHT="4000"
DEFAULT_TEMP_DAY="6500"

# ========================================
# FUNCTIONS
# ========================================

# Load current settings from .env file
load_settings() {
    if [[ -f "$ENV_FILE" ]]; then
        source "$ENV_FILE"
    fi

    # Set defaults if not defined
    WLSUNSET_START_TIME="${WLSUNSET_START_TIME:-$DEFAULT_START_TIME}"
    WLSUNSET_END_TIME="${WLSUNSET_END_TIME:-$DEFAULT_END_TIME}"
    WLSUNSET_TEMP_NIGHT="${WLSUNSET_TEMP_NIGHT:-$DEFAULT_TEMP_NIGHT}"
    WLSUNSET_TEMP_DAY="${WLSUNSET_TEMP_DAY:-$DEFAULT_TEMP_DAY}"
}

# Save settings to .env file
save_settings() {
    local start_time="$1"
    local end_time="$2"
    local temp_night="$3"
    local temp_day="$4"

    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$ENV_FILE")"

    # Write settings to .env file
    cat > "$ENV_FILE" << EOF
# Waybar Nightlight Configuration
# Generated by nightlight-config.sh

# Time range for night light (24h format HH:MM)
WLSUNSET_START_TIME="$start_time"
WLSUNSET_END_TIME="$end_time"

# Temperature settings (Kelvin)
WLSUNSET_TEMP_NIGHT="$temp_night"
WLSUNSET_TEMP_DAY="$temp_day"
EOF
}

# Validate time format (HH:MM)
validate_time() {
    local time="$1"
    if [[ $time =~ ^([0-1][0-9]|2[0-3]):[0-5][0-9]$ ]]; then
        return 0
    else
        return 1
    fi
}

# Validate temperature (1000-10000K range)
validate_temperature() {
    local temp="$1"
    if [[ $temp =~ ^[0-9]+$ ]] && [[ $temp -ge 1000 ]] && [[ $temp -le 10000 ]]; then
        return 0
    else
        return 1
    fi
}

# Show rofi input dialog
rofi_input() {
    local prompt="$1"
    local default="$2"
    local placeholder="$3"

    rofi -dmenu \
        -p "$prompt" \
        -theme-str "window { width: 400px; }" \
        -theme-str "listview { lines: 0; }" \
        -theme-str "textbox-prompt-colon { str: \"$BRACKET_OPEN $prompt $BRACKET_CLOSE\"; }" \
        -format "s" \
        -mesg "$placeholder" \
        -filter "$default"
}

# Show rofi selection dialog
rofi_select() {
    local prompt="$1"
    local options="$2"

    echo -e "$options" | rofi -dmenu \
        -p "$prompt" \
        -theme-str "window { width: 500px; }" \
        -theme-str "textbox-prompt-colon { str: \"$BRACKET_OPEN $prompt $BRACKET_CLOSE\"; }" \
        -format "s" \
        -i
}

# Main configuration menu
show_config_menu() {
    load_settings

    local menu_options="Configure Times\nConfigure Temperatures\nView Current Settings\nReset to Defaults\nApply & Restart"

    local choice=$(rofi_select "Nightlight Configuration" "$menu_options")

    case "$choice" in
        "Configure Times")
            configure_times
            ;;
        "Configure Temperatures")
            configure_temperatures
            ;;
        "View Current Settings")
            show_current_settings
            ;;
        "Reset to Defaults")
            reset_to_defaults
            ;;
        "Apply & Restart")
            apply_and_restart
            ;;
        *)
            exit 0
            ;;
    esac
}

# Configure start and end times
configure_times() {
    load_settings

    # Get start time
    local start_time
    start_time=$(rofi_input "Start Time (HH:MM)" "$WLSUNSET_START_TIME" "Enter start time in 24h format (e.g., 20:00)")

    if [[ -z "$start_time" ]]; then
        exit 0
    fi

    if ! validate_time "$start_time"; then
        rofi -e "$BRACKET_OPEN ERROR $BRACKET_CLOSE Invalid time format. Use HH:MM (24h format)"
        return 1
    fi

    # Get end time
    local end_time
    end_time=$(rofi_input "End Time (HH:MM)" "$WLSUNSET_END_TIME" "Enter end time in 24h format (e.g., 08:00)")

    if [[ -z "$end_time" ]]; then
        exit 0
    fi

    if ! validate_time "$end_time"; then
        rofi -e "$BRACKET_OPEN ERROR $BRACKET_CLOSE Invalid time format. Use HH:MM (24h format)"
        return 1
    fi

    # Save settings
    save_settings "$start_time" "$end_time" "$WLSUNSET_TEMP_NIGHT" "$WLSUNSET_TEMP_DAY"

    rofi -e "$BRACKET_OPEN SUCCESS $BRACKET_CLOSE Times updated: $start_time - $end_time"

    # Ask if user wants to apply immediately
    local apply_now=$(rofi_select "Apply Now?" "Yes\nNo")
    if [[ "$apply_now" == "Yes" ]]; then
        apply_and_restart
    fi
}

# Configure temperatures
configure_temperatures() {
    load_settings

    # Get night temperature
    local temp_night
    temp_night=$(rofi_input "Night Temperature (K)" "$WLSUNSET_TEMP_NIGHT" "Warmer = lower number (2000-4000K)")

    if [[ -z "$temp_night" ]]; then
        exit 0
    fi

    if ! validate_temperature "$temp_night"; then
        rofi -e "$BRACKET_OPEN ERROR $BRACKET_CLOSE Invalid temperature. Use 1000-10000K"
        return 1
    fi

    # Get day temperature
    local temp_day
    temp_day=$(rofi_input "Day Temperature (K)" "$WLSUNSET_TEMP_DAY" "Cooler = higher number (5000-7000K)")

    if [[ -z "$temp_day" ]]; then
        exit 0
    fi

    if ! validate_temperature "$temp_day"; then
        rofi -e "$BRACKET_OPEN ERROR $BRACKET_CLOSE Invalid temperature. Use 1000-10000K"
        return 1
    fi

    # Save settings
    save_settings "$WLSUNSET_START_TIME" "$WLSUNSET_END_TIME" "$temp_night" "$temp_day"

    rofi -e "$BRACKET_OPEN SUCCESS $BRACKET_CLOSE Temperatures updated: Night ${temp_night}K, Day ${temp_day}K"
}

# Show current settings
show_current_settings() {
    load_settings

    local settings="$BRACKET_OPEN CURRENT SETTINGS $BRACKET_CLOSE\n\n"
    settings+="Start Time: $WLSUNSET_START_TIME\n"
    settings+="End Time: $WLSUNSET_END_TIME\n"
    settings+="Night Temperature: ${WLSUNSET_TEMP_NIGHT}K\n"
    settings+="Day Temperature: ${WLSUNSET_TEMP_DAY}K\n\n"
    settings+="$BRACKET_OPEN CONFIG FILE $BRACKET_CLOSE\n"
    settings+="$ENV_FILE"

    rofi -e "$settings"
}

# Reset to defaults
reset_to_defaults() {
    local confirm=$(rofi_select "Reset to Defaults?" "Yes, reset everything\nNo, cancel")

    if [[ "$confirm" == "Yes, reset everything" ]]; then
        save_settings "$DEFAULT_START_TIME" "$DEFAULT_END_TIME" "$DEFAULT_TEMP_NIGHT" "$DEFAULT_TEMP_DAY"
        apply_and_restart
    fi
}

# Apply settings and restart nightlight if running
apply_and_restart() {
    # Signal waybar to update
    pkill -RTMIN+9 waybar 2>/dev/null

    # Restart nightlight if it's currently running
    if pgrep -x wlsunset >/dev/null 2>&1; then
        "$HOME/.config/waybar/scripts/nightlight-toggle.sh" off
        sleep 1
        "$HOME/.config/waybar/scripts/nightlight-toggle.sh" on
        rofi -e "$BRACKET_OPEN APPLIED $BRACKET_CLOSE Nightlight restarted with new settings"
    else
        rofi -e "$BRACKET_OPEN APPLIED $BRACKET_CLOSE Settings saved. Toggle nightlight to apply."
    fi
}

# ========================================
# MAIN SCRIPT LOGIC
# ========================================

case "${1:-menu}" in
    "menu")
        show_config_menu
        ;;
    "times")
        configure_times
        ;;
    "temps")
        configure_temperatures
        ;;
    "reset")
        reset_to_defaults
        ;;
    *)
        echo "Usage: $0 {menu|times|temps|reset}"
        echo ""
        echo "Commands:"
        echo "  menu   - Show main configuration menu"
        echo "  times  - Configure start/end times only"
        echo "  temps  - Configure temperatures only"
        echo "  reset  - Reset to default values"
        exit 1
        ;;
esac